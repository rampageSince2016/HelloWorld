影响效率有哪几个方面：
1. coding思路较窄
2. bug找不到
3. 业务不熟

解决方法：
1. 总结对实际已经编码过的问题， 反复练习，强化思路;
	多看别人的代码，对别人好的coding思路进行反复练习，强化思路
2. 全面使用单元测试， 并使用5w1h的方式设计测试用例
3. 重视业务，在业务上只要有不明白的地方都要设法弄清

执行：
1. 每天至少对一个已经遇到并已解决的问题重新进行编码; 每天至少学习一个别人coding的好思路
2. 花一天时间学习好python的nose库，为单元测试提供基础
3. 对以上coding的地方都要进行5w1h的提问和测试用例的设计
4. 周一至周五，每天至少在业务口径库里记一条自己不知道的业务口径或用伪码写一段业务逻辑

检查：
6/5: [2 Done]
6/6: 
6/7: [4 Done] 
6/8: [1 Done] [4 Done]
6/9:
6/10:

总结：
当天有紧急且量大的工作时没有执行制定的执行方案。
执行过程中遇到问题卡住导致没有执行当前或接下来要执行的执行方案。
端午放假没带电脑回家时没有执行制定的执行方案。

调整：
效果不错，继续。
